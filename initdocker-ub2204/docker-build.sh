#!/bin/bash

set -euo pipefail

declare -a HELP=(
    "[-h|--help]"
    "[-d|--dry-run]"
    # "[-l|--from-local]"
    "[--git-user '']"    # TODO
    "[--git-email '']"   # TODO
    "[-i|--image]"
    "[-a|--auto-check-user]"
    "[-u|--user <USER>]"

    "[DOCKER_BUILD_ARGS]"
)

declare -a DOCKER_BUILD_OPTS=()
DRY_RUN=0
FROM_LOCAL=0
GIT_USER=""
GIT_EMAIL=""
DOCKER_IMAGE=""
DOCKER_USER=""
AUTO_CHECK_USER=0  # Require docker pull

parse_args() {
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
        -h|--help)
            echo "Enrich a Docker image with initdocker stuffs."
            echo "Usage: $(basename ${BASH_SOURCE[0]}) ${HELP[@]}"
            exit 0
            ;;
        # -l|--from-local)
        #     FROM_LOCAL=1
        #     shift
        #     ;;
        -d|--dry-run)
            DRY_RUN=1
            shift
            ;;
        --git-user)
            [[ $# -gt 1 ]] || { echo "Expect --git-user <GIT_USER>" ; exit 1 ; }
            GIT_USER="$2"
            shift 2
            ;;
        --git-user)
            [[ $# -gt 1 ]] || { echo "Expect --git-email <GIT_EMAIL>" ; exit 1 ; }
            GIT_EMAIL="$2"
            shift 2
            ;;
        -i|--image)
            [[ $# -gt 1 ]] || { echo "Expect --image <IMAGE>" ; exit 1 ; }
            DOCKER_IMAGE="$2"
            shift 2
            ;;
        -a|--auto-check-user)
            AUTO_CHECK_USER=1
            shift
            ;;
        -u|--user)
            DOCKER_USER="$2"
            shift 2
            ;;
        *)
            DOCKER_BUILD_OPTS+=("$key")
            shift
            ;;
        esac
    done

    [[ "$DOCKER_IMAGE" != "" ]] || { echo "Must define a container image" ; exit -1 ; }

    if [[ $AUTO_CHECK_USER -gt 0 ]]; then
        [[ "$(docker images --filter reference=$DOCKER_IMAGE -q)" != "" ]] || {
            echo "Auto-check user: please 'docker pull $DOCKER_IMAGE' first."
            exit 1
        }
    fi
}

parse_args "$@"

[[ $AUTO_CHECK_USER -gt 0 && "$DOCKER_USER" == "" ]] \
    && DOCKER_USER="$(docker inspect $DOCKER_IMAGE | jq -r '.[0].Config.User')" \
    || true

# echo "Docker USER=$DOCKER_USER"

TS=$(date +%Y%m%d-%k%M%S-%N-%z)
## TODO: add [-b|--backup-dockerfile]
# [[ ! -f Dockerfile.initdocker ]] || {
#     echo "Backing-up Dockerfile.initdocker => Dockerfile.initdocker.$TS"
#     mv Dockerfile.initdocker Dockerfile.initdocker.$TS
# }

cat << EOF > Dockerfile.initdocker
# Auto-generated by initdocker/docker-build.sh on $TS
FROM $DOCKER_IMAGE

EOF

if [[ "$DOCKER_USER" != "" && "$DOCKER_USER" != "root" ]]; then
    echo "USER root
" >> Dockerfile.initdocker
fi

if [[ $FROM_LOCAL == 0 ]]; then
    cat << 'EOF' >> Dockerfile.initdocker
RUN apt-get update \
    && apt-get install -y curl \
    && curl -v -sfL \
        -H "Cache-Control: no-cache, no-store, must-revalidate" -H "Pragma: no-cache" -H "Expires: 0" \
        https://raw.githubusercontent.com/verdimrc/pyutil/master/initdocker-ub2204/setup-my-docker.sh \
        | bash -s
EOF
else
    # TODO
    echo "Not implemented" >&2
    exit 2
fi

if [[ "$DOCKER_USER" != "" && "$DOCKER_USER" != "root" ]]; then
    echo "
USER $DOCKER_USER" >> Dockerfile.initdocker
fi

command -v bat &> /dev/null \
    && bat --paging=never Dockerfile.initdocker \
    || cat Dockerfile.initdocker

echo "Next: docker build ${DOCKER_BUILD_OPTS[@]} -f Dockerfile.initdocker ."

[[ $DRY_RUN -gt 0 ]] \
    && exit 0 \
    || docker build ${DOCKER_BUILD_OPTS[@]} -f Dockerfile.initdocker .
